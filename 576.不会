const int MOD = 1000000007;
class Solution {
public:
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        vector<vector<vector<int>>> dp(m, vector<vector<int>>(n, vector<int>(maxMove + 1, 0)));
        dp[startRow][startColumn][0] = 1;
        int count = 0;

        for (int move = 1; move <= maxMove; move++) {
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    if (dp[i][j][move - 1] > 0) {
                        for (auto [di, dj] : vector<pair<int, int>>{{-1, 0}, {1, 0}, {0, -1}, {0, 1}}) {
                            int ni = i + di, nj = j + dj;
                            if (ni >= 0 && ni < m && nj >= 0 && nj < n) {
                                dp[ni][nj][move] = (dp[ni][nj][move] + dp[i][j][move - 1]) % MOD;
                            } else {
                                count = (count + dp[i][j][move - 1]) % MOD;
                            }
                        }
                    }
                }
            }
        }
        return count;
    }
};
